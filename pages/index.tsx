import type { GetStaticProps } from "next";
import Head from "next/head";
import Link from "next/link";
import { motion } from "framer-motion";
import { ChevronDoubleUpIcon } from "@heroicons/react/24/solid";
import About from "../components/About";
import ContactMe from "../components/ContactMe";
import Header from "../components/Header";
import Hero from "../components/Hero";
import Projects from "../components/Projects";
import Skills from "../components/Skills";
import WorkExperience from "../components/WorkExperience";
import { Experience, PageInfo, Project, Skill, Social } from "../typings";
import { fetchExperiences } from "../utils/fetchExperiences";
import { fetchPageInfo } from "../utils/fetchPageInfo";
import { fetchProjects } from "../utils/fetchProjects";
import { fetchSkills } from "../utils/fetchSkills";
import { fetchSocials } from "../utils/fetchSocials";
import { useEffect } from "react";
import { handleSmoothScroll } from "../utils/updateHashUrl";

type Props = {
  pageInfo: PageInfo;
  experiences: Experience[];
  projects: Project[];
  skills: Skill[];
  socials: Social[];
};

const Home = ({ pageInfo, experiences, projects, skills, socials }: Props) => {
  // useEffect(() => {
  //   const scrollSnap = document.querySelector(".snap-y");
  //   scrollSnap?.addEventListener("wheel", (e) => {
  //     e.preventDefault();
  //     scrollSnap.scrollBy({
  //       top: e.deltaY * 2,
  //     });
  //   });
  // }, []);

  // useEffect(() => {
  //   const delay = 1000; // Set the delay in milliseconds
  //   const timeoutId = setTimeout(() => {
  //     const cleanupFunction = handleSmoothScroll();
  //     return () => {
  //       clearTimeout(timeoutId);
  //       cleanupFunction();
  //     };
  //   }, delay);
  // }, []);

  return (
    <div className="bg-[rgb(36,36,36)] text-white h-screen snap-y snap-mandatory overflow-y-auto overflow-x-hidden scrollbar scrollbar-track-gray-400/20 scrollbar-thumb-[#F7AB0A]/80 z-0">
      <Head>
        <title>Carlos&apos;s Portfolio</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* Header */}
      <Header socials={socials} />

      {/* Hero */}
      <section id="hero" className="snap-start">
        <Hero pageInfo={pageInfo} />
      </section>

      {/* About */}
      <section id="about" className="snap-center">
        <About pageInfo={pageInfo} />
      </section>

      {/* Experience */}
      <section id="experience" className="snap-center">
        <WorkExperience experiences={experiences} />
      </section>

      {/* Skills */}
      <section id="skills" className="snap-center">
        <Skills skills={skills} />
      </section>

      {/* Projects */}
      <section id="projects" className="snap-center">
        <Projects projects={projects} />
      </section>

      {/* Contact Me */}
      <section id="contact" className="snap-end">
        <ContactMe />
      </section>

      {/* Footer */}
      <Link href="#hero">
        <footer className="absolute xs:bottom-10 xs:right-10 bottom-10 right-10 cursor-pointer">
          <div className="flex justify-center xl:justify-end">
            <motion.div
              animate={{ y: [0, 24, 0] }}
              transition={{
                duration: 1.5,
                repeat: Infinity,
                repeatType: "loop",
              }}
              className="bg-[#F7AB0A] p-2 rounded-full"
            >
              <ChevronDoubleUpIcon className="h-5 w-5 text-[rgb(36,36,36)] rounded-full filter grayscale hover:grayscale-0 cursor-pointer" />
            </motion.div>
          </div>
        </footer>
      </Link>
    </div>
  );
};

export default Home;

export const getStaticProps: GetStaticProps<Props> = async () => {
  const pageInfo: PageInfo = await fetchPageInfo();
  const experiences: Experience[] = await fetchExperiences();
  const projects: Project[] = await fetchProjects();
  const skills: Skill[] = await fetchSkills();
  const socials: Social[] = await fetchSocials();

  return {
    props: {
      pageInfo,
      experiences,
      projects,
      skills,
      socials,
    },
    // Next.js will attempt to re-generate the page:
    // - When a request comes in
    // - At most once 60 seconds
    revalidate: 10, // In seconds
  };
};
